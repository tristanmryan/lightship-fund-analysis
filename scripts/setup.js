#!/usr/bin/env node

/**
 * Lightship Fund Analysis Setup Script
 * This script helps set up the initial configuration for the new architecture
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function setup() {
  console.log('🚀 Lightship Fund Analysis Setup\n');
  console.log('This script will help you set up the initial configuration for the new architecture.\n');

  // Check if .env.local already exists
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const overwrite = await question('⚠️  .env.local already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('\n📋 Please provide the following information:\n');

  // Supabase Configuration
  const supabaseUrl = await question('1. Supabase Project URL: ');
  const supabaseAnonKey = await question('2. Supabase Anonymous Key: ');

  // Ycharts API Configuration
  const ychartsApiKey = await question('3. Ycharts API Key (press Enter to use default): ') || 'mL0NEKgBS+Ecn7PIvEM9fA';

  // Application Configuration
  const appPassword = await question('4. Application Password (press Enter to use default): ') || 'lightship2024';

  // Environment Configuration
  const environment = await question('5. Environment (development/production) [development]: ') || 'development';
  const debugMode = await question('6. Debug Mode (true/false) [false]: ') || 'false';

  // Generate .env.local content
  const envContent = `# Lightship Fund Analysis Environment Variables
# Generated by setup script on ${new Date().toISOString()}

# Supabase Configuration
REACT_APP_SUPABASE_URL=${supabaseUrl}
REACT_APP_SUPABASE_ANON_KEY=${supabaseAnonKey}

# Ycharts API Configuration
REACT_APP_YCHARTS_API_KEY=${ychartsApiKey}

# Application Configuration
REACT_APP_APP_PASSWORD=${appPassword}

# Optional: Development Configuration
REACT_APP_ENVIRONMENT=${environment}
REACT_APP_DEBUG_MODE=${debugMode}
`;

  // Write .env.local file
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n✅ .env.local file created successfully!');
  } catch (error) {
    console.error('\n❌ Failed to create .env.local file:', error.message);
    rl.close();
    return;
  }

  // Check if Supabase schema needs to be run
  console.log('\n📊 Database Setup:');
  console.log('1. Create a new Supabase project at https://supabase.com');
  console.log('2. Go to the SQL Editor in your Supabase dashboard');
  console.log('3. Copy and paste the contents of supabase-schema.sql');
  console.log('4. Run the SQL script to create the database schema');

  // Check if dependencies are installed
  console.log('\n📦 Dependencies:');
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  if (fs.existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const requiredDeps = ['@supabase/supabase-js', '@supabase/auth-helpers-react'];
    const missingDeps = requiredDeps.filter(dep => !packageJson.dependencies[dep]);

    if (missingDeps.length > 0) {
      console.log(`⚠️  Missing dependencies: ${missingDeps.join(', ')}`);
      console.log('Run: npm install');
    } else {
      console.log('✅ All required dependencies are installed');
    }
  }

  // Next steps
  console.log('\n🎯 Next Steps:');
  console.log('1. Start the development server: npm start');
  console.log('2. Test the authentication with the password you set');
  console.log('3. Check if the database connection is working');
  console.log('4. Run migration if you have existing IndexedDB data');

  console.log('\n📚 Documentation:');
  console.log('- Architecture overview: ARCHITECTURE.md');
  console.log('- Database schema: supabase-schema.sql');
  console.log('- Environment variables: env.example');

  console.log('\n✨ Setup completed successfully!');
  rl.close();
}

// Handle script errors
process.on('unhandledRejection', (error) => {
  console.error('❌ Setup failed:', error.message);
  process.exit(1);
});

// Run setup
setup().catch((error) => {
  console.error('❌ Setup failed:', error.message);
  process.exit(1);
}); 